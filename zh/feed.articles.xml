<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title> - Articles</title>
		<description></description>
		<link>http://embedsec.systems/zh</link>
		<atom:link href="http://embedsec.systems/zh/feed.articles.xml" rel="self" type="application/rss+xml" />
		
			
			<item>
				<title>Coreboot for HiFive</title>
				
					<description>&lt;p&gt;#Coreboot for HiFive&lt;/p&gt;

</description>
				
				<pubDate>Mon, 05 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/coreboot/2017/06/05/coreboot-4-hifive.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/coreboot/2017/06/05/coreboot-4-hifive.html</guid>
			</item>
			
		
			
			<item>
				<title>使用Syzkaller&amp;QEMU对针对内核进行QA</title>
				
					<description>&lt;p&gt;by kaipeng94@gmail.com&lt;/p&gt;

</description>
				
				<pubDate>Mon, 05 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/gnulinux-security/2017/06/05/syzkaller.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/gnulinux-security/2017/06/05/syzkaller.html</guid>
			</item>
			
		
			
			<item>
				<title>使用Syzkaller&amp;QEMU捕捉内核堆溢出Demo</title>
				
					<description>&lt;p&gt;by kaipeng94@gmail.com&lt;/p&gt;

</description>
				
				<pubDate>Mon, 05 Jun 2017 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/gnulinux-security/2017/06/05/syzkaller-demo.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/gnulinux-security/2017/06/05/syzkaller-demo.html</guid>
			</item>
			
		
			
			<item>
				<title>canary分析</title>
				
					<description>&lt;h1 id=&quot;canary-analysis&quot;&gt;canary analysis&lt;/h1&gt;
&lt;p&gt;@(GCC | Glibc | kernel)[GNU System-Security]
        –&lt;a href=&quot;https://github.com/fanfuqiang&quot;&gt;zet&lt;/a&gt;&lt;/p&gt;

</description>
				
				<pubDate>Sun, 27 Nov 2016 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/2016/11/27/canary-analysis.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/2016/11/27/canary-analysis.html</guid>
			</item>
			
		
			
			<item>
				<title>RELRO分析</title>
				
					<description>&lt;h1 id=&quot;relrorelocation-read-only&quot;&gt;RELRO(Relocation Read Only)&lt;/h1&gt;
&lt;p&gt;@(ELF | GCC | linker | runtime)[GNU System-Security]
        –&lt;a href=&quot;https://github.com/fanfuqiang&quot;&gt;zet&lt;/a&gt;&lt;/p&gt;

</description>
				
				<pubDate>Fri, 25 Nov 2016 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/2016/11/25/RelRO-analysis.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/2016/11/25/RelRO-analysis.html</guid>
			</item>
			
		
			
			<item>
				<title>shared library wrinkle</title>
				
					<description>&lt;h1 id=&quot;shared-library怎样实现对象的单一定义原则&quot;&gt;shared library怎样实现对象的单一定义原则&lt;/h1&gt;
&lt;p&gt;@(ELF | linker | runtime)[shared library]
        –&lt;a href=&quot;https://github.com/fanfuqiang&quot;&gt;zet&lt;/a&gt;&lt;/p&gt;

</description>
				
				<pubDate>Wed, 21 Sep 2016 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/gnu/linux-security/2016/09/21/linker-shared-library-wrinkle.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/gnu/linux-security/2016/09/21/linker-shared-library-wrinkle.html</guid>
			</item>
			
		
			
			<item>
				<title>PIC and PIE analysis</title>
				
					<description>&lt;p&gt;#Position Independent Code(PIC) and Position Independent Executable(PIE)
@(mitgation)[PIC|PIE|gcc|binutils]&lt;/p&gt;

</description>
				
				<pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/gnulinux-security/2016/06/30/PIC-and-PIE-analysis.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/gnulinux-security/2016/06/30/PIC-and-PIE-analysis.html</guid>
			</item>
			
		
			
			<item>
				<title>NX(No-eXecute)的实现分析</title>
				
					<description>&lt;h1 id=&quot;nxno-execute的实现分析&quot;&gt;NX(No-eXecute)的实现分析&lt;/h1&gt;

</description>
				
				<pubDate>Tue, 31 May 2016 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/gnulinux-security/2016/05/31/NX-No-eXecute-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/gnulinux-security/2016/05/31/NX-No-eXecute-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90.html</guid>
			</item>
			
		
			
			<item>
				<title>用Misfortune-Cookie给ROM-0 Bug打补丁</title>
				
					<description>&lt;p&gt;这篇文章只是为了好玩，特别是给那些喜欢调整系统的嵌入式黑客们。所以这不是一个正当的修复ROM-0 Bug的手段，好玩的是通过一个bug来修复另外一个bug。让我们开始寻找我们的乐趣。正如我一篇文章《&lt;a href=&quot;http://embedsec.systems/zh/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/2015/02/16/Misfortune-Cookie-CVE-2014-9222-%E8%A7%A3%E5%AF%86.html&quot;&gt;Misfortune Cookie解密&lt;/a&gt;》所写，我们可以在任意地址写入任意数据。除了解锁路由，这也有可能为ROM-0 bug打上补丁。在这之前,让我们先仔细来看看misfortune  cookie bug中对数据格式的覆盖。让我们回到代码段:&lt;/p&gt;

</description>
				
				<pubDate>Tue, 03 Mar 2015 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/2015/03/03/%E7%94%A8Misfortune-Cookie%E7%BB%99ROM-0Bug%E6%89%93%E8%A1%A5%E4%B8%81.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/2015/03/03/%E7%94%A8Misfortune-Cookie%E7%BB%99ROM-0Bug%E6%89%93%E8%A1%A5%E4%B8%81.html</guid>
			</item>
			
		
			
			<item>
				<title>Misfortune Cookie (CVE-2014-9222) 解密</title>
				
					<description>&lt;p&gt;Misfortune Cookie 漏洞被公开了有一阵子，但在公开环境中还是没有深入分析这个漏洞技术细节的文章。那些叫做“Misfortune Cookie扫描器”如下所示，只是一个用来获取”/Allegro”路径返回字符串的简单脚本。&lt;/p&gt;

</description>
				
				<pubDate>Mon, 16 Feb 2015 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/zh/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/2015/02/16/Misfortune-Cookie-CVE-2014-9222-%E8%A7%A3%E5%AF%86.html</link>
				<guid isPermaLink="true">http://embedsec.systems/zh/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/2015/02/16/Misfortune-Cookie-CVE-2014-9222-%E8%A7%A3%E5%AF%86.html</guid>
			</item>
			
		
	</channel>
</rss>
