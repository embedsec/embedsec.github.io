<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Evil</title>
		<description></description>		
		<link>http://embedsec.systems</link>
		<atom:link href="http://embedsec.systems/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Debian GNU/Linux security checklist and hardening</title>
				        
				
					<description>
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;[sth0r@shawn-fortress]$ uname -a
Linux shawn-fortress 3.7-trunk-686-pae #1 SMP Debian 3.7.2-0+kali8 i686 GNU/Linux
|=-----------------------------------------------------------------=|
|=-----=[ D O   N O T   F U C K   W I T H   A   H A C K E R ]=-----=|
|=-----------------------------------------------------------------=|
|=------------------------[ #5 File 0x02 ]-------------------------=|
|=-----------------------------------------------------------------=|
|=----=[ Debian GNU/Linux security checklist and hardening ]=------=|
|=-----------------------------------------------------------------=|
|=-------------------=[ By Shawn the R0ck   ]=---------------------=|
|=-----------------------------------------------------------------=|
|=-----------------------------------------------------------------=|
|=-------------------=[ Update: Apr 8 2015 ]=----------------------=|
|=-----------------------------------------------------------------=|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-- [ CONTENTS&lt;/p&gt;

&lt;ol start=&quot;0&quot;&gt;
  &lt;li&gt;About this doc  &lt;/li&gt;
  &lt;li&gt;Security updates  &lt;/li&gt;
      &lt;li&gt;Vulnerability Assessment&lt;br /&gt;
      2.1 GCC mitigation&lt;br /&gt;
      2.2 0ld sch00l *nix file auditing&lt;br /&gt;
      2.3 GNU/Linux’s auditd&lt;br /&gt;
      2.4 T00ls  &lt;/li&gt;
  &lt;li&gt;Kernel security&lt;br /&gt;
      3.1 Apparmor&lt;br /&gt;
      3.2 SELinux&lt;br /&gt;
      3.3 Mempo kernel&lt;br /&gt;
      3.3.1 PaX/Grsecurity  &lt;/li&gt;
  &lt;li&gt;SSL/TLS Checklist&lt;br /&gt;
      4.1 Ciphersuites in Apache2/Nginx  &lt;/li&gt;
  &lt;li&gt;PHP  &lt;/li&gt;
  &lt;li&gt;Weirdo audit  &lt;/li&gt;
  &lt;li&gt;Reference  &lt;/li&gt;
&lt;/ol&gt;

</description>
				
				<pubDate>Thu, 09 Apr 2015 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/gnulinux-security/2015/04/09/Debian-GNU-Linux-security-checklist-and-hardening.html</link>
				<guid isPermaLink="true">http://embedsec.systems/gnulinux-security/2015/04/09/Debian-GNU-Linux-security-checklist-and-hardening.html</guid>
			</item>
		
			<item>
				<title>Patching ROM-0 Bug With Misfortune Cookie</title>
				        
				
					<description>&lt;p&gt;This is a paper just for fun, especially for those embedded hackers who looking
for fun in tweaking embedded system. So, this is not the proper solution to fix
ROM-0 bug, it is ridiculous to fix a bug with another bug. Anyway, let’s start
our fun now. From my previous paper of “Misfortune Cookie Demystified”, it is
clear we can perform arbitrary address overwrite with arbitrary data. Other than
to unlock a router, it is possible to patch a router in order to fix ROM-0 bug.
Before that, let us have a look to the data format of overwriting action being
executed by misfortune cookie in detail. Back to the code snippet.&lt;/p&gt;

</description>
				
				<pubDate>Tue, 03 Mar 2015 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/embedded-device-security/2015/03/03/Patching-ROM-0-Bug-With-Misfortune-Cookie.html</link>
				<guid isPermaLink="true">http://embedsec.systems/embedded-device-security/2015/03/03/Patching-ROM-0-Bug-With-Misfortune-Cookie.html</guid>
			</item>
		
			<item>
				<title>Misfortune Cookie (CVE-2014-9222) Demystified</title>
				        
				
					<description>&lt;p&gt;The misfortune cookie vulnerability has been around for a while but still lacking
an analysis which illustrate the techinical details of the vulnerability in public.
Those so called “misfortune cookie scanner” are just a simple script to retrieve
the return string at path “/Allegro” as shown below,&lt;/p&gt;

</description>
				
				<pubDate>Mon, 16 Feb 2015 00:00:00 +0800</pubDate>
				<link>http://embedsec.systems/embedded-device-security/2015/02/16/Misfortune-Cookie-CVE-2014-9222-Demystified.html</link>
				<guid isPermaLink="true">http://embedsec.systems/embedded-device-security/2015/02/16/Misfortune-Cookie-CVE-2014-9222-Demystified.html</guid>
			</item>
		
	</channel>
</rss>
